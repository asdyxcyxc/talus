#!/bin/bash

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

sudo mkdir -p /talus/data /var/log/talus/{apache2}

sudo useradd -M talus -g talus

sudo mkdir -p /talus/install
sudo chown talus:talus /talus/install
sudo chmod -R g+ws /talus/install

cp $DIR/../../slave/vm/prebootstrap.py /talus/install/
cat << EOF > /talus/install/IMAGE_SETUP_README.txt
Requirements:
=============

All:
----
* install drivers that can be found in the mounted CDROM
* auto-login
* prebootstrap.py set to run on login
* numpy
* turn off auto-updates (you want your base image to be clean w/ no updates!)
* python lxml module
* any other python modules/dependencies that need to be compiled or
	installed via an installer

Windows:
--------

Make sure the following are installed:

* comtypes
* pip install requests
* Windbg
* potentially pre-generated fastoche comtypes python files
* python
* VCREDIST 2012 x86 AND x64 (for windbg msec.dll)
* msec.dll in the winext folder of both x86 and x64 windbgs
* psexec (all pstools?)

Be sure to do the following:

* turn off UAC

You must also configure WINRM by doing (in an Administrator cmd.exe):

	winrm quickconfig -q
	winrm set winrm/config/winrs @{MaxMemoryPerShellMB="512"}
	winrm set winrm/config @{MaxTimeoutms="1800000"}
	winrm set winrm/config/service @{AllowUnencrypted="true"}
	winrm set winrm/config/service/auth @{Basic="true"}
	sc config WinRM start= auto

Also note that all created networks in the VM must be set the “Work”
network. This can be set to be the default action by going to:

	Open "gpedit.msc" -> Go to Computer Configration –> Windows Settings –> Security Settings –> Network list manager

It may also help to attempt to shrink the size of the VM using sdelete

	sdelete -z C:

Linux:
------

Make sure the following are installed:

* pip (apt-get install python-pip)
* python

Be sure to do the following:

* passwordless sudo

Prebootstrap.py
===============
You must put the prebootstrap.py file found here onto the VM and set it
to run on login. The prebootstrap.py script will wait for a file named
RUN_TALUS_RUN to appear in the system's temporary directory, at which
point it will import and run the bootstrap (and hence your jobs).

gl;hf
-d0c
EOF

mkdir -p /tmp/talus/tmp
chmod -R o+rws /tmp/talus/tmp

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

sudo apt-get install -y \
	libvirt-bin \
	qemu-kvm \
	virtinst \
	python-libvirt \
	qemu-utils \
	libxslt-dev \
	libxml2-dev \
	libvirt-dev \
	libxml2-dev \
	libdevmapper-dev \
	libnl-dev \
	libffi-dev \
	build-essential \
	ruby-dev \
	python-pip \
	python-dev \
	libyajl* \
	wget \
	gcc make pkg-config libxml2-dev libgnutls-dev libdevmapper-dev libcurl4-gnutls-dev python-dev libpciaccess-dev libxen-dev libnl-dev libyajl-dev uuid-dev libpcap-dev xsltproc

(mkdir -p /tmp/vagrant_install \
	&& cd /tmp/vagrant_install \
	&& wget https://releases.hashicorp.com/vagrant/1.8.5/vagrant_1.8.5_x86_64.deb \
	&& sudo dpkg -i vagrant_1.8.5_x86_64.deb \
	&& rm -rf /tmp/vagrant_install)

vagrant plugin install vagrant-libvirt
sudo pip install tabulate xmltodict mongoengine mock pymongo==2.8.0 sh pika docutils netifaces pip2pi

echo "USER INPUT" 
echo "USER INPUT" 
echo "USER INPUT" 
echo ""
echo 
read -p "through which interface does the master interact with the slaves?" intf

cat << EOF > /tmp/talus-master.conf
description "Talus Master Daemon"
author		"Optiv Labs"

start on filesystem or runlevel [2345]
stop on shutdown
respawn

script
	$(readlink -f $DIR)/start_raw $intf
end script
EOF

sudo mv /tmp/talus-master.conf /etc/init/

sudo $DIR/init_repo
